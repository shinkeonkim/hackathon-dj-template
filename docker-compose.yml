x-celery-base: &celery-base
  build:
    context: .
    dockerfile: ./environments/development/Dockerfile
  restart: always
  env_file:
    - .env
  environment:
    - DJANGO_SETTINGS_MODULE=config.settings.development
  volumes:
    - ./webapp:/app/webapp
    - ./environments/development/entrypoint.sh:/app/entrypoint.sh
  entrypoint: []

services:
  webapp:
    build:
      context: .
      dockerfile: ./environments/development/Dockerfile
    command: python manage.py runserver 0.0.0.0:8080
    expose:
      - "8080"
    volumes:
      - ./webapp:/app/webapp
      - ./environments/development/entrypoint.sh:/app/entrypoint.sh
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:alpine
    container_name: template-nginx-dev
    ports:
      - "${PORT}:80"
    volumes:
      - ./environments/development/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./webapp/staticfiles:/app/staticfiles
      - ./webapp/media:/app/media
    depends_on:
      - webapp

  postgres:
    image: postgres:15.4
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  test_postgres:
    image: postgres:15.4
    ports:
      - ${TEST_POSTGRES_PORT}:${TEST_POSTGRES_PORT}
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${TEST_POSTGRES_DB}
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery-worker:
    <<: *celery-base
    container_name: celery-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config worker -l INFO

  celery-beat:
    <<: *celery-base
    container_name: celery-beat
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler

  flower:
    <<: *celery-base
    container_name: flower
    ports:
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config flower --port=5555

volumes:
  postgres_data:
  test_postgres_data:
